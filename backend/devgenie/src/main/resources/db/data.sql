INSERT INTO quiz (tag, quiz_content, quiz_answer)
VALUES ('DATABASE','데이터베이스의 특징에 대해 설명해주세요', '비정형적인 질의에 대해 실시간 처리에 의한 응답이 가능해야하며, 데이터베이스는 항상 최신의 데이터를 유지해야합니다. 데이터베이스는 다수의 사용자가 동시에 같은 내용의 데이터를 이용할 수 있어야하며, 데이터를 참조할 때 데이터의 주소나 위치에 의해서가 아니라 사용자가 요구하는 데이터 내용으로 찾을 수 있어야합니다.'),
       ('NETWORK', '대칭키, 비대칭키 암호화 방식에 대해 설명해주세요.', '대칭키는 암호화와 복호화에 같은 암호 키를 쓰는 알고리즘입니다.비대칭키는 암호화와 복호화할 때 키를 서로 다른 키로 사용하는 암호화 알고리즘입니다.'),
       ('DATA_STRUCTURE', 'Array(List)의 가장 큰 특징과 그로 인해 발생하는 장점과 단점에 대해 설명해주세요.', 'Array의 가장 큰 특징은 순차적으로 데이터를 저장한다는 점입니다.데이터에 순서가 있기 때문에 0부터 시작하는 index가 존재하며, index를 사용해 특정 요소를 찾고 조작이 가능하다는 것이 Array의 장점입니다.순차적으로 존재하는 데이터의 중간에 요소가 삽입되거나 삭제되는 경우 그 뒤의 모든 요소들을 한 칸씩 뒤로 밀거나 당겨줘야 하는 단점도 있습니다.이러한 이유로 Array는 정보가 자주 삭제되거나 추가되는 데이터를 담기에는 적절치 않습니다.'),
       ('OPERATING_SYSTEM', '프로세스와 쓰레드의 차이에 대해 설명해주세요.', '프로세스는 실행 중인 프로그램을 말하며, 완벽히 독립적이기 때문에 메모리 영역(Code, Data, Heap, Stack)을 다른 프로세스와 공유하지 않습니다. 프로세스는 최소 1개의 쓰레드(메인 쓰레드)를 가지고 있습니다.쓰레드는 프로세스 내에서 Stack만 따로 할당 받고, 그 이외의 메모리 영역(Code, Data, Heap)영역을 공유하기 때문에 다른 쓰레드의 실행 결과를 즉시 확인할 수 있습니다. 쓰레드는 프로세스 내에 존재하며 프로세스가 할당받은 자원을 이용하여 실행됩니다.'),
       ('ALGORITHM', '버블 정렬(Bubble Sort)에 대해 설명해주세요.', '버블 정렬는 서로 인접한 두 원소를 비교하여 정렬하는 알고리즘입니다. 0번 인덱스부터 n-1번 인덱스까지 n번까지의 모든 인덱스를 비교하며 정렬합니다. 시간 복잡도는 O(n^2)입니다.'),
       ('DATABASE','데이터베이스 언어 DDL, DML, DCL에 대해 설명해주세요', 'DDL은 데이터베이스 구조를 정의, 수정, 삭제하는 언어, DML은 데이터베이스내의 자료 검색, 삽입, 갱신, 삭제를 위한 언어, DCL은 데이터에 대해 무결성 유지, 병행 수행 재어, 보호와 관리를 위한 언어입니다.'),
       ('DATA_STRUCTURE', 'Tree와 Heap의 구조에 대해 설명해주세요.', 'Tree는 스택과 큐와 같은 선형 구조가 아닌 비선형 자료구조이며, 계층적 관계를 표현하기에 적합합니다.Heap은 최댓값 또는 최솟값을 찾아내는 연산을 쉽게 하기 위해 고안된 구조로,각 노드의 키값이 자식의 키값보다 작지 않거나(최대힙) 그 자식의 키값보다 크지 않은(최소힙) 완전이진트리 입니다.'),
       ('DATABASE', '트리거에 대해 설명해주세요', '트리거는 특정 테이블에 대한 이벤트에 반응해 DML 문이 수행 되었을 때 데이터베이스에서 자동으로 동작하도록 작성된 프로그램입니다. 사용자가 직접 호출하는 것이 아니라 데이터베이스가 자동으로 호출한다는 것이 가장 큰 특징입니다.'),
       ('NETWORK', '세션 기반 인증과 토큰 기반 인증의 차이에 대해 얘기해주세요.', '세션 기반 인증은 클라이언트로부터 요청을 받으면 클라이언트의 상태 정보를 저장하므로 Stateful한 구조를 가지고,토큰 기반 인증은 상태 정보를 서버에 저장하지 않으므로 Stateless한 구조를 가집니다.'),
       ('DATABASE', 'Index의 정의와 장단점을 설명해주세요.', 'Index란 인덱스를 검색하여 해당 자료의 테이블을 엑세스 하는 방법입니다. 인덱스는 항상 정렬된 상태를 유지하기 때문에 원하는 값을 검색하는 것이 빠르다는 장점이 있지만, 새로운 값을 추가하거나 삭제, 수정하는 경우에는 쿼리문 실행 속도가 느려지는 단점이 있습니다.'),
       ('ALGORITHM', '병합 정렬(Merge Sort)에 대해 설명해주세요.', '병합 정렬은 주어진 배열을 크기가 1인 배열로 분할하고 합병하면서 정렬을 진행하는 분할/정복 알고리즘입니다.시간 복잡도는 O(nlogn)입니다.'),
       ('DATABASE', '정규화에 대해 설명해주세요', '하나의 릴레이션에 하나의 의미만 존재하도록 릴레이션을 분해하는 과정이며, 데이터의 일관성, 최소한의 데이터 중복, 최대한의 데이터 유연성을 가지도록하는 방법입니다. 정규화에는 4가지 정규형이 있습니다. 제1 정규형은 테이블의 컬럼이 하나의 값을 갖도록 분해하도록 하는 형태이고, 제2 정규형은 제1 정규형을 만족하고, 기본키가 아닌 속성이 기본키에 완전 함수 종속이도록 분해한 형태입니다. 제3 정규형은 제2 정규형을 만족하고, 이행적 함수 종속을 없애도록 분해한 형태입니다. 마지막으로 BCNF 정규형은 제3 정규형을 만족하고, 함수 종속성이 성립할 때 모든 결정자가 후보키가 되도록 분해한 정규형입니다.'),
       ('OPERATING_SYSTEM', '멀티 프로세스와 멀티 쓰레드의 특징에 대해 설명해주세요.', '멀티 프로세스는 하나의 프로세스가 죽어도 다른 프로세스에 영향을 끼치지 않고 계속 실행된다는 장점이 있지만 멀티 쓰레드보다 많은 메모리 공간과 CPU 시간을 차지한다는 단점이 있습니다.멀티 쓰레드는 멀티 프로세스보다 적은 메모리 공간을 차지하고 문맥 전환이 빠르다는 장점이 있지만 하나의 쓰레드에 문제가 생기면 전체 쓰레드가 영향을 받으며 동기화 문제도 있다는 단점이 있습니다.'),
       ('DATABASE', '정규화의 장단점을 설명해주세요', '장점으로는 데이터베이스 변경 시 이상현상이 발생하는 문제점을 해결할 수 있다는 점과 정규화된 데이터베이스를 구조 확장 할 시에 그 구조를 변경하지 않아도 되거나 일부만 변경해도 된다는 점이 있습니다. 단점으로는 릴레이션의 분해로 인해 릴레이션 간의 JOIN연산이 많아지기 때문에 질의에 대한 응답시간이 느려질 수 있다는 점이 있습니다.'),
       ('DATA_STRUCTURE', 'Array와 ArrayList의 차이점에 대해 설명해주세요.', 'Array는 크기가 고정적이고, ArrayList는 크기가 가변적입니다.Array는 초기화 시 메모리에 할당되어 ArrayList보다 속도가 빠르고,ArrayList는 데이터 추가 및 삭제 시 메모리를 재할당하기 때문에 속도가 Array보다 느립니다.'),
       ('DATABASE', 'RDBMS와 NoSQL은 어느 경우에 적합한가요?', 'RDBMS는 데이터 구조가 명확하고, 변경 될 여지가 없으며 스키마가 중요한 경우에 사용하는 것이 좋습니다 또한 중복된 데이터가 없어 변경이 용이하기 때문에 관계를 맺고 있는 데이터가 자주 변경이 이루어지는 시스템에 적합합니다. 반면 NoSQL은 정확한 데이터 구조를 알 수 없고 데이터가 변경/확장 될 수 있는 경우 사용하는 것이 좋습니다. 또한 데이터 중복이 발생할 수 있으며 중복된 데이터가 변경될 시 모든 컬렉션에서 수정해야 하기 때문에 갱신이 많이 이루어지지 않는 시스템에 적합합니다.'),
       ('NETWORK', 'Connection Timeout과 Read Timeout의 차이에 대해 설명해주세요.', '서버 자체에 클라이언트가 어떤 사유로 접근을 실패했을 시 적용되는 것이 Connection Timeout입니다.클라이언트가 서버에 접속을 성공 했으나 서버가 로직을 수행하는 시간이 너무 길어 제대로 응답을 못 준 상태에서 클라이언트가 연결을 해제하는 것이 Read Timeout입니다.'),
       ('DATABASE', '트랜잭션이란 무엇인지 설명해주세요.', '트랜잭션은 작업의 완전성을 보장해줍니다. 작업들이 모두 처리되거나 처리되지 못할 경우 이전 상태로 복구하여 작업의 일부만 적용되는 현상을 방지해주는 기능입니다. 하나의 트랜잭션은 commit되거나 rollback됩니다.'),
       ('ALGORITHM', '선택 정렬(Selection Sort)에 대해 설명해주세요.', '선택 정렬은 첫 번째 값을 두번째 부터 마지막 값까지 차례대로 비교하여 최솟값을 찾아 첫 번째에 놓고, 두 번째 값을 세 번째 부터 마지막 값까지 비교하여 최솟값을 찾아 두 번째 위치에 놓는 과정을 반복하며 정렬하는 알고리즘입니다. 시간복잡도는 O(n^2)입니다.'),
       ('DATABASE', '트랜잭션의 특성에 대해 설명해주세요', '작업이 모두 반영되던지 아니면 하나도 반영되지 않아야한다는 원자성, 실행이 완료되면 언제나 일관성 있는 상태를 유지해야한다는 일관성, 둘 이상 트랜잭션이 동시에 실행될 경우 서로의 연산에 끼어들 수 없다는 독립성, 완료된 결과는 영구적으로 반영되어야한다는 영구성 4가지가 있습니다.'),
       ('OPERATING_SYSTEM', '멀티 쓰레드 환경에서의 주의사항을 설명해주세요.', '다수의 쓰레드가 공유 데이터에 동시에 접근하는 경우에 상호배제 또는 동기화 기법을 통해 동시성 문제 또는 교착 상태가 발생하지 않도록 주의해야 합니다.'),
       ('DATABASE', '데이터베이스 락에 대해 설명해주세요', '데이터베이스 락은 트랜잭션 처리의 순차성을 보장하기 위한 방법입니다. 공유락은 트랜잭션이 읽기를 할 때 사용하는 락이며, 데이터를 읽기만하기 때문에 같은 공유락 끼리는 동시에 접근이 가능합니다. 베타락은 데이터를 변경할 때 사용하는 락입니다. 트랜잭션이 완료될 때까지 유지되며, 베타락이 끝나기 전까지 어떠한 접근도 허용하지 않습니다.'),
       ('DATA_STRUCTURE', 'Stack과 Queue의 구조에 대해 설명해주세요.', 'Stack과 Queue는 선형 자료구조의 일종이며, Array와 LinkedList로 구현할 수 있습니다.Stack은 후입선출(LIFO)방식 즉, 나중에 들어간 원소가 먼저 나오는 구조이고 Queue는 선입선출(FIFO)방식 즉, 먼저 들어간 원소가 먼저 나오는 구조를 갖습니다.'),
       ('DATA_STRUCTURE', 'Priority Queue(우선순위 큐)에 대해 설명해주세요.', '우선순위 큐는 들어간 순서에 상관없이 우선순위가 높은 데이터를 먼저 꺼내기 위해 고안된 자료구조입니다.우선순위 큐 구현 방식에는 배열, 연결 리스트, 힙이 있고, 그중 힙 방식이 worst case라도 시간 복잡도 O(logN)을 보장하기 때문에 일반적으로 완전 이진트리 형태의 힙을 이용해 구현합니다.'),
       ('OPERATING_SYSTEM', '멀티 쓰레드의 동시성과 병렬성을 설명해주세요.', '동시성은 멀티 작업을 위해 싱글 코어에서 여러 개의 쓰레드가 번갈아 실행하는 것을 말합니다.(동시에 실행하는 것처럼 보이지만 사실은 번갈아가며 실행하고 있는 것임)병렬성은 멀티 작업을 위해 멀티 코어에서 한 개 이상의 쓰레드를 포함하는 각 코어들을 동시에 실행하는 것을 말합니다.'),
       ('NETWORK', 'GET과 POST의 차이에 대해 설명해주세요.', 'GET은 데이터를 조회하기 위해 사용되는 방식으로 데이터를 헤더에 추가하여 전송하는 방식입니다.URL에 데이터가 노출되므로 보안적으로 중요한 데이터를 포함해서는 안됩니다.POST는 데이터를 추가 또는 수정하기 위해 사용되는 방식으로 데이터를 바디에 추가하여 전송하는 방식입니다.완전히 안전하다는 것은 아니지만 URL에 데이터가 노출되지 않아 GET 보다는 안전합니다.'),
       ('ALGORITHM', '삽입 정렬(Injection Sort)에 대해 설명해주세요.', '삽입 정렬은 두 번째 값부터 시작해 그 앞에 존재하는 원소들과 비교하여 삽입할 위치를 찾아 삽입하는 정렬 알고리즘입니다.평균 시간복잡도는 O(n^2)이며, Best Case 의 경우 O(n)까지 높아질 수 있습니다.'),
       ('OPERATING_SYSTEM', '선점형 스케줄링과 비선점형 스케줄링의 차이를 설명해주세요.', '선점형은 하나의 프로세스가 다른 프로세스 대신에 CPU를 차지할 수 있음을 말하고,비선점형은 하나의 프로세스가 끝나지 않으면 다른 프로세스는 CPU를 사용할 수 없음을 말합니다.'),
       ('NETWORK', 'JWT 토큰에 대해 설명해주세요.', 'JWT는 JSON 포맷을 이용하는 Claim 기반의 웹 토큰이며, 토큰 자체를 정보로 사용하는 Self-Contained 방식으로 정보를 안전하게 전달합니다.'),
       ('ALGORITHM', '재귀 알고리즘에 대해 설명해주세요.', '재귀 알고리즘이란 함수 내부에서 함수가 자기 자신을 또 다시 호출하여 문제를 해결하는 알고리즘입니다.자기자신을 계속해서 호출하여 끝없이 반복되게 되므로 반복을 중단할 조건이 반드시 필요합니다.');


INSERT INTO member_quiz (member_id,quiz_id,submission_answer,feedback,solved_date_time,oblivion_status)
VALUES (null,1,'입력된 답변','피드백','2023-11-30T20:20:40.389208',"OBLIVION_STATUS_1"),
       (null,11,'입력된 답변','피드백','2023-12-11T20:20:40.389208',"OBLIVION_STATUS_1"),
       (null,5,'입력된 답변','피드백','2023-01-11T20:20:40.389208',"OBLIVION_STATUS_2"),
       (null,23,'입력된 답변','피드백','2023-12-11T20:20:40.389208',"OBLIVION_STATUS_2"),
       (null,15,'입력된 답변','피드백','2023-12-11T20:20:40.389208',"OBLIVION_STATUS_3"),
       (null,6,'입력된 답변','피드백','2023-01-11T20:20:40.389208',"OBLIVION_STATUS_3"),
       (null,7,'입력된 답변','피드백','2023-12-11T20:20:40.389208',"OBLIVION_STATUS_3"),
       (null,12,'입력된 답변','피드백','2023-12-11T20:20:40.389208',"OBLIVION_STATUS_4"),
       (null,9,'입력된 답변','피드백','2023-01-11T20:20:40.389208',"OBLIVION_STATUS_4"),
       (null,4,'입력된 답변','피드백','2023-12-11T20:20:40.389208',"OBLIVION_STATUS_4"),
       (null,2,'입력된 답변','피드백','2023-12-11T20:20:40.389208',"OBLIVION_STATUS_4"),
       (null,14,'입력된 답변','피드백','2023-01-11T20:20:40.389208',"OBLIVION_STATUS_4");